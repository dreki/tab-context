{"version":3,"file":"static/js/serviceWorker.js","mappings":"yBAKAA,OAAOC,QAAQC,YAAYC,aAAY,WAQnCH,OAAOI,QAAQC,OAAO,CAAEC,UAAU,IAAQ,SAACF,GACvCA,EAAQG,SAAQ,SAACC,GAEb,IAAKA,EAAOC,MAAwB,WAAhBD,EAAOC,KAAmB,CAC1C,IAAKD,EAAOE,KACR,OAiBJ,IAAMC,EAAUX,OAAOC,QAAQW,OAAO,WAChCC,EAAQL,EAAOE,KAAKI,MAAK,SAACC,GAAG,OAAKA,EAAIC,KAAOD,EAAIC,IAAIC,WAAWN,EAAQ,IAE9E,GAAIE,EAGA,OAFAK,QAAQC,IAAI,4CAAD,OAA6CX,EAAOY,GAAE,WACjEF,QAAQC,IAAI,UAAD,OAAWN,EAAMG,MAMhChB,OAAOU,KAAKW,OAAO,CACfC,SAAUd,EAAOY,GACjBJ,IAAKhB,OAAOC,QAAQW,OAAO,WAC3BW,QAAQ,GAEhB,CACJ,GACJ,GACJ,IAEAvB,OAAOI,QAAQoB,UAAUrB,aAAY,SAACmB,GAClCJ,QAAQC,IAAI,YAAD,OAAaG,EAAQ,gBACpC,IAEAtB,OAAOU,KAAKe,QAAQtB,aAAY,SAACuB,EAAOC,GACpCT,QAAQC,IAAI,SAAD,OAAUO,EAAK,gCAAwBC,EAASL,SAAQ,wBAAgBK,EAASC,QAAO,KAOvG,IAGA5B,OAAOU,KAAKmB,WAAW1B,aAAY,SAAC2B,EAAYC,GAC5Cb,QAAQC,IAAI,SAAD,OAAUY,EAAY,gCAAwBD,EAAU,KACvE,G","sources":["service-worker/serviceWorker.ts"],"sourcesContent":["import { WindowObserver } from \"../stores/window\";\n\n\n// On install, open 'ui.html' from within the extension. Open a new pinned tab in all windows,\n// unless there's already a tab open for this extension pinned.\nchrome.runtime.onInstalled.addListener(() => {\n    /*\n        chrome.tabs.create({\n        //url: \"ui.html\" });\n        url: chrome.runtime.getURL(\"ui.html\"),\n        pinned: true,\n    });\n*/\n    chrome.windows.getAll({ populate: true }, (windows) => {\n        windows.forEach((window) => {\n            // If the window is not a popup window\n            if (!window.type || window.type === 'normal') {\n                if (!window.tabs) {\n                    return;\n                }\n                // Check if there's already a pinned tab for this extension. See if it ends with\n                // 'ui.html', and optionally has a query string.\n                // const pinnedTab = window.tabs.find((tab) => tab.pinned && tab.url && tab.url.match(/ui\\.html(\\?.*)?$/));\n                /*\n                let pinnedTab = window.tabs.find((tab) => tab.pinned);\n                // const pinnedTab = window.tabs.find((tab) => tab.pinned && tab.url === chrome.runtime.getURL('ui.html'));\n                if (pinnedTab) {\n                    console.log(`> Found pinned tab for this extension in window ${window.id}.`);\n                    console.log(`> URL: ${pinnedTab.url}`);\n\n                    return;\n                }\n                */\n\n                // Find a tab for 'ui.html' in this extension. Ignore query parameters.\n                const baseUrl = chrome.runtime.getURL('ui.html');\n                const uiTab = window.tabs.find((tab) => tab.url && tab.url.startsWith(baseUrl));\n                // console.log(`> uiTab: ${uiTab}`)\n                if (uiTab) {\n                    console.log(`> Found tab for this extension in window ${window.id}.`);\n                    console.log(`> URL: ${uiTab.url}`);\n                    return;\n                }\n\n\n                // Open a new pinned tab in the window\n                chrome.tabs.create({\n                    windowId: window.id,\n                    url: chrome.runtime.getURL('ui.html'),\n                    pinned: true,\n                });\n            }\n        });\n    });\n});\n\nchrome.windows.onRemoved.addListener((windowId) => {\n    console.log(`> Window ${windowId} was closed.`);\n});\n\nchrome.tabs.onMoved.addListener((tabId, moveInfo) => {\n    console.log(`> Tab ${tabId} was moved to window ${moveInfo.windowId} at position ${moveInfo.toIndex}.`);\n    \n    // const windowObserverReloader = async () => {\n    //     const windowObserver = new WindowObserver();\n    //     await windowObserver.loadChromeWindows();\n    // }\n\n});\n\n// Listen for tab order to change\nchrome.tabs.onReplaced.addListener((addedTabId, removedTabId) => {\n    console.log(`> Tab ${removedTabId} was replaced by tab ${addedTabId}.`);\n});\n\nexport { };\n"],"names":["chrome","runtime","onInstalled","addListener","windows","getAll","populate","forEach","window","type","tabs","baseUrl","getURL","uiTab","find","tab","url","startsWith","console","log","id","create","windowId","pinned","onRemoved","onMoved","tabId","moveInfo","toIndex","onReplaced","addedTabId","removedTabId"],"sourceRoot":""}